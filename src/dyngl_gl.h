/* Generated by dyngl_h.pl from mesa/include/GL/gl.h */

	void (*ClearIndex)( GLfloat c );
	void (*ClearColor)( GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha );
	void (*Clear)( GLbitfield mask );
	void (*IndexMask)( GLuint mask );
	void (*ColorMask)( GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha );
	void (*AlphaFunc)( GLenum func, GLclampf ref );
	void (*BlendFunc)( GLenum sfactor, GLenum dfactor );
	void (*LogicOp)( GLenum opcode );
	void (*CullFace)( GLenum mode );
	void (*FrontFace)( GLenum mode );
	void (*PointSize)( GLfloat size );
	void (*LineWidth)( GLfloat width );
	void (*LineStipple)( GLint factor, GLushort pattern );
	void (*PolygonMode)( GLenum face, GLenum mode );
	void (*PolygonOffset)( GLfloat factor, GLfloat units );
	void (*PolygonStipple)( const GLubyte *mask );
	void (*GetPolygonStipple)( GLubyte *mask );
	void (*EdgeFlag)( GLboolean flag );
	void (*EdgeFlagv)( const GLboolean *flag );
	void (*Scissor)( GLint x, GLint y, GLsizei width, GLsizei height);
	void (*ClipPlane)( GLenum plane, const GLdouble *equation );
	void (*GetClipPlane)( GLenum plane, GLdouble *equation );
	void (*DrawBuffer)( GLenum mode );
	void (*ReadBuffer)( GLenum mode );
	void (*Enable)( GLenum cap );
	void (*Disable)( GLenum cap );
	GLboolean (*IsEnabled)( GLenum cap );
	void (*EnableClientState)( GLenum cap ); /* 1.1 */
	void (*DisableClientState)( GLenum cap ); /* 1.1 */
	void (*GetBooleanv)( GLenum pname, GLboolean *params );
	void (*GetDoublev)( GLenum pname, GLdouble *params );
	void (*GetFloatv)( GLenum pname, GLfloat *params );
	void (*GetIntegerv)( GLenum pname, GLint *params );
	void (*PushAttrib)( GLbitfield mask );
	void (*PopAttrib)( void );
	void (*PushClientAttrib)( GLbitfield mask ); /* 1.1 */
	void (*PopClientAttrib)( void ); /* 1.1 */
	GLint (*RenderMode)( GLenum mode );
	GLenum (*GetError)( void );
	const GLubyte * (*GetString)( GLenum name );
	void (*Finish)( void );
	void (*Flush)( void );
	void (*Hint)( GLenum target, GLenum mode );
	void (*ClearDepth)( GLclampd depth );
	void (*DepthFunc)( GLenum func );
	void (*DepthMask)( GLboolean flag );
	void (*DepthRange)( GLclampd near_val, GLclampd far_val );
	void (*ClearAccum)( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
	void (*Accum)( GLenum op, GLfloat value );
	void (*MatrixMode)( GLenum mode );
	void (*Ortho)( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val );
	void (*Frustum)( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val );
	void (*Viewport)( GLint x, GLint y, GLsizei width, GLsizei height );
	void (*PushMatrix)( void );
	void (*PopMatrix)( void );
	void (*LoadIdentity)( void );
	void (*LoadMatrixd)( const GLdouble *m );
	void (*LoadMatrixf)( const GLfloat *m );
	void (*MultMatrixd)( const GLdouble *m );
	void (*MultMatrixf)( const GLfloat *m );
	void (*Rotated)( GLdouble angle, GLdouble x, GLdouble y, GLdouble z );
	void (*Rotatef)( GLfloat angle, GLfloat x, GLfloat y, GLfloat z );
	void (*Scaled)( GLdouble x, GLdouble y, GLdouble z );
	void (*Scalef)( GLfloat x, GLfloat y, GLfloat z );
	void (*Translated)( GLdouble x, GLdouble y, GLdouble z );
	void (*Translatef)( GLfloat x, GLfloat y, GLfloat z );
	GLboolean (*IsList)( GLuint list );
	void (*DeleteLists)( GLuint list, GLsizei range );
	GLuint (*GenLists)( GLsizei range );
	void (*NewList)( GLuint list, GLenum mode );
	void (*EndList)( void );
	void (*CallList)( GLuint list );
	void (*CallLists)( GLsizei n, GLenum type, const GLvoid *lists );
	void (*ListBase)( GLuint base );
	void (*Begin)( GLenum mode );
	void (*End)( void );
	void (*Vertex2d)( GLdouble x, GLdouble y );
	void (*Vertex2f)( GLfloat x, GLfloat y );
	void (*Vertex2i)( GLint x, GLint y );
	void (*Vertex2s)( GLshort x, GLshort y );
	void (*Vertex3d)( GLdouble x, GLdouble y, GLdouble z );
	void (*Vertex3f)( GLfloat x, GLfloat y, GLfloat z );
	void (*Vertex3i)( GLint x, GLint y, GLint z );
	void (*Vertex3s)( GLshort x, GLshort y, GLshort z );
	void (*Vertex4d)( GLdouble x, GLdouble y, GLdouble z, GLdouble w );
	void (*Vertex4f)( GLfloat x, GLfloat y, GLfloat z, GLfloat w );
	void (*Vertex4i)( GLint x, GLint y, GLint z, GLint w );
	void (*Vertex4s)( GLshort x, GLshort y, GLshort z, GLshort w );
	void (*Vertex2dv)( const GLdouble *v );
	void (*Vertex2fv)( const GLfloat *v );
	void (*Vertex2iv)( const GLint *v );
	void (*Vertex2sv)( const GLshort *v );
	void (*Vertex3dv)( const GLdouble *v );
	void (*Vertex3fv)( const GLfloat *v );
	void (*Vertex3iv)( const GLint *v );
	void (*Vertex3sv)( const GLshort *v );
	void (*Vertex4dv)( const GLdouble *v );
	void (*Vertex4fv)( const GLfloat *v );
	void (*Vertex4iv)( const GLint *v );
	void (*Vertex4sv)( const GLshort *v );
	void (*Normal3b)( GLbyte nx, GLbyte ny, GLbyte nz );
	void (*Normal3d)( GLdouble nx, GLdouble ny, GLdouble nz );
	void (*Normal3f)( GLfloat nx, GLfloat ny, GLfloat nz );
	void (*Normal3i)( GLint nx, GLint ny, GLint nz );
	void (*Normal3s)( GLshort nx, GLshort ny, GLshort nz );
	void (*Normal3bv)( const GLbyte *v );
	void (*Normal3dv)( const GLdouble *v );
	void (*Normal3fv)( const GLfloat *v );
	void (*Normal3iv)( const GLint *v );
	void (*Normal3sv)( const GLshort *v );
	void (*Indexd)( GLdouble c );
	void (*Indexf)( GLfloat c );
	void (*Indexi)( GLint c );
	void (*Indexs)( GLshort c );
	void (*Indexub)( GLubyte c ); /* 1.1 */
	void (*Indexdv)( const GLdouble *c );
	void (*Indexfv)( const GLfloat *c );
	void (*Indexiv)( const GLint *c );
	void (*Indexsv)( const GLshort *c );
	void (*Indexubv)( const GLubyte *c ); /* 1.1 */
	void (*Color3b)( GLbyte red, GLbyte green, GLbyte blue );
	void (*Color3d)( GLdouble red, GLdouble green, GLdouble blue );
	void (*Color3f)( GLfloat red, GLfloat green, GLfloat blue );
	void (*Color3i)( GLint red, GLint green, GLint blue );
	void (*Color3s)( GLshort red, GLshort green, GLshort blue );
	void (*Color3ub)( GLubyte red, GLubyte green, GLubyte blue );
	void (*Color3ui)( GLuint red, GLuint green, GLuint blue );
	void (*Color3us)( GLushort red, GLushort green, GLushort blue );
	void (*Color4b)( GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha );
	void (*Color4d)( GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha );
	void (*Color4f)( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );
	void (*Color4i)( GLint red, GLint green, GLint blue, GLint alpha );
	void (*Color4s)( GLshort red, GLshort green, GLshort blue, GLshort alpha );
	void (*Color4ub)( GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha );
	void (*Color4ui)( GLuint red, GLuint green, GLuint blue, GLuint alpha );
	void (*Color4us)( GLushort red, GLushort green, GLushort blue, GLushort alpha );
	void (*Color3bv)( const GLbyte *v );
	void (*Color3dv)( const GLdouble *v );
	void (*Color3fv)( const GLfloat *v );
	void (*Color3iv)( const GLint *v );
	void (*Color3sv)( const GLshort *v );
	void (*Color3ubv)( const GLubyte *v );
	void (*Color3uiv)( const GLuint *v );
	void (*Color3usv)( const GLushort *v );
	void (*Color4bv)( const GLbyte *v );
	void (*Color4dv)( const GLdouble *v );
	void (*Color4fv)( const GLfloat *v );
	void (*Color4iv)( const GLint *v );
	void (*Color4sv)( const GLshort *v );
	void (*Color4ubv)( const GLubyte *v );
	void (*Color4uiv)( const GLuint *v );
	void (*Color4usv)( const GLushort *v );
	void (*TexCoord1d)( GLdouble s );
	void (*TexCoord1f)( GLfloat s );
	void (*TexCoord1i)( GLint s );
	void (*TexCoord1s)( GLshort s );
	void (*TexCoord2d)( GLdouble s, GLdouble t );
	void (*TexCoord2f)( GLfloat s, GLfloat t );
	void (*TexCoord2i)( GLint s, GLint t );
	void (*TexCoord2s)( GLshort s, GLshort t );
	void (*TexCoord3d)( GLdouble s, GLdouble t, GLdouble r );
	void (*TexCoord3f)( GLfloat s, GLfloat t, GLfloat r );
	void (*TexCoord3i)( GLint s, GLint t, GLint r );
	void (*TexCoord3s)( GLshort s, GLshort t, GLshort r );
	void (*TexCoord4d)( GLdouble s, GLdouble t, GLdouble r, GLdouble q );
	void (*TexCoord4f)( GLfloat s, GLfloat t, GLfloat r, GLfloat q );
	void (*TexCoord4i)( GLint s, GLint t, GLint r, GLint q );
	void (*TexCoord4s)( GLshort s, GLshort t, GLshort r, GLshort q );
	void (*TexCoord1dv)( const GLdouble *v );
	void (*TexCoord1fv)( const GLfloat *v );
	void (*TexCoord1iv)( const GLint *v );
	void (*TexCoord1sv)( const GLshort *v );
	void (*TexCoord2dv)( const GLdouble *v );
	void (*TexCoord2fv)( const GLfloat *v );
	void (*TexCoord2iv)( const GLint *v );
	void (*TexCoord2sv)( const GLshort *v );
	void (*TexCoord3dv)( const GLdouble *v );
	void (*TexCoord3fv)( const GLfloat *v );
	void (*TexCoord3iv)( const GLint *v );
	void (*TexCoord3sv)( const GLshort *v );
	void (*TexCoord4dv)( const GLdouble *v );
	void (*TexCoord4fv)( const GLfloat *v );
	void (*TexCoord4iv)( const GLint *v );
	void (*TexCoord4sv)( const GLshort *v );
	void (*RasterPos2d)( GLdouble x, GLdouble y );
	void (*RasterPos2f)( GLfloat x, GLfloat y );
	void (*RasterPos2i)( GLint x, GLint y );
	void (*RasterPos2s)( GLshort x, GLshort y );
	void (*RasterPos3d)( GLdouble x, GLdouble y, GLdouble z );
	void (*RasterPos3f)( GLfloat x, GLfloat y, GLfloat z );
	void (*RasterPos3i)( GLint x, GLint y, GLint z );
	void (*RasterPos3s)( GLshort x, GLshort y, GLshort z );
	void (*RasterPos4d)( GLdouble x, GLdouble y, GLdouble z, GLdouble w );
	void (*RasterPos4f)( GLfloat x, GLfloat y, GLfloat z, GLfloat w );
	void (*RasterPos4i)( GLint x, GLint y, GLint z, GLint w );
	void (*RasterPos4s)( GLshort x, GLshort y, GLshort z, GLshort w );
	void (*RasterPos2dv)( const GLdouble *v );
	void (*RasterPos2fv)( const GLfloat *v );
	void (*RasterPos2iv)( const GLint *v );
	void (*RasterPos2sv)( const GLshort *v );
	void (*RasterPos3dv)( const GLdouble *v );
	void (*RasterPos3fv)( const GLfloat *v );
	void (*RasterPos3iv)( const GLint *v );
	void (*RasterPos3sv)( const GLshort *v );
	void (*RasterPos4dv)( const GLdouble *v );
	void (*RasterPos4fv)( const GLfloat *v );
	void (*RasterPos4iv)( const GLint *v );
	void (*RasterPos4sv)( const GLshort *v );
	void (*Rectd)( GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2 );
	void (*Rectf)( GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2 );
	void (*Recti)( GLint x1, GLint y1, GLint x2, GLint y2 );
	void (*Rects)( GLshort x1, GLshort y1, GLshort x2, GLshort y2 );
	void (*Rectdv)( const GLdouble *v1, const GLdouble *v2 );
	void (*Rectfv)( const GLfloat *v1, const GLfloat *v2 );
	void (*Rectiv)( const GLint *v1, const GLint *v2 );
	void (*Rectsv)( const GLshort *v1, const GLshort *v2 );
	void (*VertexPointer)( GLint size, GLenum type, GLsizei stride, const GLvoid *ptr );
	void (*NormalPointer)( GLenum type, GLsizei stride, const GLvoid *ptr );
	void (*ColorPointer)( GLint size, GLenum type, GLsizei stride, const GLvoid *ptr );
	void (*IndexPointer)( GLenum type, GLsizei stride, const GLvoid *ptr );
	void (*TexCoordPointer)( GLint size, GLenum type, GLsizei stride, const GLvoid *ptr );
	void (*EdgeFlagPointer)( GLsizei stride, const GLvoid *ptr );
	void (*GetPointerv)( GLenum pname, GLvoid **params );
	void (*ArrayElement)( GLint i );
	void (*DrawArrays)( GLenum mode, GLint first, GLsizei count );
	void (*DrawElements)( GLenum mode, GLsizei count, GLenum type, const GLvoid *indices );
	void (*InterleavedArrays)( GLenum format, GLsizei stride, const GLvoid *pointer );
	void (*ShadeModel)( GLenum mode );
	void (*Lightf)( GLenum light, GLenum pname, GLfloat param );
	void (*Lighti)( GLenum light, GLenum pname, GLint param );
	void (*Lightfv)( GLenum light, GLenum pname, const GLfloat *params );
	void (*Lightiv)( GLenum light, GLenum pname, const GLint *params );
	void (*GetLightfv)( GLenum light, GLenum pname, GLfloat *params );
	void (*GetLightiv)( GLenum light, GLenum pname, GLint *params );
	void (*LightModelf)( GLenum pname, GLfloat param );
	void (*LightModeli)( GLenum pname, GLint param );
	void (*LightModelfv)( GLenum pname, const GLfloat *params );
	void (*LightModeliv)( GLenum pname, const GLint *params );
	void (*Materialf)( GLenum face, GLenum pname, GLfloat param );
	void (*Materiali)( GLenum face, GLenum pname, GLint param );
	void (*Materialfv)( GLenum face, GLenum pname, const GLfloat *params );
	void (*Materialiv)( GLenum face, GLenum pname, const GLint *params );
	void (*GetMaterialfv)( GLenum face, GLenum pname, GLfloat *params );
	void (*GetMaterialiv)( GLenum face, GLenum pname, GLint *params );
	void (*ColorMaterial)( GLenum face, GLenum mode );
	void (*PixelZoom)( GLfloat xfactor, GLfloat yfactor );
	void (*PixelStoref)( GLenum pname, GLfloat param );
	void (*PixelStorei)( GLenum pname, GLint param );
	void (*PixelTransferf)( GLenum pname, GLfloat param );
	void (*PixelTransferi)( GLenum pname, GLint param );
	void (*PixelMapfv)( GLenum map, GLsizei mapsize, const GLfloat *values );
	void (*PixelMapuiv)( GLenum map, GLsizei mapsize, const GLuint *values );
	void (*PixelMapusv)( GLenum map, GLsizei mapsize, const GLushort *values );
	void (*GetPixelMapfv)( GLenum map, GLfloat *values );
	void (*GetPixelMapuiv)( GLenum map, GLuint *values );
	void (*GetPixelMapusv)( GLenum map, GLushort *values );
	void (*Bitmap)( GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *bitmap );
	void (*ReadPixels)( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels );
	void (*DrawPixels)( GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels );
	void (*CopyPixels)( GLint x, GLint y, GLsizei width, GLsizei height, GLenum type );
	void (*StencilFunc)( GLenum func, GLint ref, GLuint mask );
	void (*StencilMask)( GLuint mask );
	void (*StencilOp)( GLenum fail, GLenum zfail, GLenum zpass );
	void (*ClearStencil)( GLint s );
	void (*TexGend)( GLenum coord, GLenum pname, GLdouble param );
	void (*TexGenf)( GLenum coord, GLenum pname, GLfloat param );
	void (*TexGeni)( GLenum coord, GLenum pname, GLint param );
	void (*TexGendv)( GLenum coord, GLenum pname, const GLdouble *params );
	void (*TexGenfv)( GLenum coord, GLenum pname, const GLfloat *params );
	void (*TexGeniv)( GLenum coord, GLenum pname, const GLint *params );
	void (*GetTexGendv)( GLenum coord, GLenum pname, GLdouble *params );
	void (*GetTexGenfv)( GLenum coord, GLenum pname, GLfloat *params );
	void (*GetTexGeniv)( GLenum coord, GLenum pname, GLint *params );
	void (*TexEnvf)( GLenum target, GLenum pname, GLfloat param );
	void (*TexEnvi)( GLenum target, GLenum pname, GLint param );
	void (*TexEnvfv)( GLenum target, GLenum pname, const GLfloat *params );
	void (*TexEnviv)( GLenum target, GLenum pname, const GLint *params );
	void (*GetTexEnvfv)( GLenum target, GLenum pname, GLfloat *params );
	void (*GetTexEnviv)( GLenum target, GLenum pname, GLint *params );
	void (*TexParameterf)( GLenum target, GLenum pname, GLfloat param );
	void (*TexParameteri)( GLenum target, GLenum pname, GLint param );
	void (*TexParameterfv)( GLenum target, GLenum pname, const GLfloat *params );
	void (*TexParameteriv)( GLenum target, GLenum pname, const GLint *params );
	void (*GetTexParameterfv)( GLenum target, GLenum pname, GLfloat *params);
	void (*GetTexParameteriv)( GLenum target, GLenum pname, GLint *params );
	void (*GetTexLevelParameterfv)( GLenum target, GLint level, GLenum pname, GLfloat *params );
	void (*GetTexLevelParameteriv)( GLenum target, GLint level, GLenum pname, GLint *params );
	void (*TexImage1D)( GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels );
	void (*TexImage2D)( GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels );
	void (*GetTexImage)( GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels );
	void (*GenTextures)( GLsizei n, GLuint *textures );
	void (*DeleteTextures)( GLsizei n, const GLuint *textures);
	void (*BindTexture)( GLenum target, GLuint texture );
	void (*PrioritizeTextures)( GLsizei n, const GLuint *textures, const GLclampf *priorities );
	GLboolean (*AreTexturesResident)( GLsizei n, const GLuint *textures, GLboolean *residences );
	GLboolean (*IsTexture)( GLuint texture );
	void (*TexSubImage1D)( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels );
	void (*TexSubImage2D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels );
	void (*CopyTexImage1D)( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border );
	void (*CopyTexImage2D)( GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border );
	void (*CopyTexSubImage1D)( GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width );
	void (*CopyTexSubImage2D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height );
	void (*Map1d)( GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points );
	void (*Map1f)( GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points );
	void (*Map2d)( GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points );
	void (*Map2f)( GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points );
	void (*GetMapdv)( GLenum target, GLenum query, GLdouble *v );
	void (*GetMapfv)( GLenum target, GLenum query, GLfloat *v );
	void (*GetMapiv)( GLenum target, GLenum query, GLint *v );
	void (*EvalCoord1d)( GLdouble u );
	void (*EvalCoord1f)( GLfloat u );
	void (*EvalCoord1dv)( const GLdouble *u );
	void (*EvalCoord1fv)( const GLfloat *u );
	void (*EvalCoord2d)( GLdouble u, GLdouble v );
	void (*EvalCoord2f)( GLfloat u, GLfloat v );
	void (*EvalCoord2dv)( const GLdouble *u );
	void (*EvalCoord2fv)( const GLfloat *u );
	void (*MapGrid1d)( GLint un, GLdouble u1, GLdouble u2 );
	void (*MapGrid1f)( GLint un, GLfloat u1, GLfloat u2 );
	void (*MapGrid2d)( GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2 );
	void (*MapGrid2f)( GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2 );
	void (*EvalPoint1)( GLint i );
	void (*EvalPoint2)( GLint i, GLint j );
	void (*EvalMesh1)( GLenum mode, GLint i1, GLint i2 );
	void (*EvalMesh2)( GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2 );
	void (*Fogf)( GLenum pname, GLfloat param );
	void (*Fogi)( GLenum pname, GLint param );
	void (*Fogfv)( GLenum pname, const GLfloat *params );
	void (*Fogiv)( GLenum pname, const GLint *params );
	void (*FeedbackBuffer)( GLsizei size, GLenum type, GLfloat *buffer );
	void (*PassThrough)( GLfloat token );
	void (*SelectBuffer)( GLsizei size, GLuint *buffer );
	void (*InitNames)( void );
	void (*LoadName)( GLuint name );
	void (*PushName)( GLuint name );
	void (*PopName)( void );
	void (*DrawRangeElements)( GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices );
	void (*TexImage3D)( GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels );
	void (*TexSubImage3D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
	void (*CopyTexSubImage3D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height );
	void (*ColorTable)( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table );
	void (*ColorSubTable)( GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data );
	void (*ColorTableParameteriv)(GLenum target, GLenum pname, const GLint *params);
	void (*ColorTableParameterfv)(GLenum target, GLenum pname, const GLfloat *params);
	void (*CopyColorSubTable)( GLenum target, GLsizei start, GLint x, GLint y, GLsizei width );
	void (*CopyColorTable)( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width );
	void (*GetColorTable)( GLenum target, GLenum format, GLenum type, GLvoid *table );
	void (*GetColorTableParameterfv)( GLenum target, GLenum pname, GLfloat *params );
	void (*GetColorTableParameteriv)( GLenum target, GLenum pname, GLint *params );
	void (*BlendEquation)( GLenum mode );
	void (*BlendColor)( GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha );
	void (*Histogram)( GLenum target, GLsizei width, GLenum internalformat, GLboolean sink );
	void (*ResetHistogram)( GLenum target );
	void (*GetHistogram)( GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values );
	void (*GetHistogramParameterfv)( GLenum target, GLenum pname, GLfloat *params );
	void (*GetHistogramParameteriv)( GLenum target, GLenum pname, GLint *params );
	void (*Minmax)( GLenum target, GLenum internalformat, GLboolean sink );
	void (*ResetMinmax)( GLenum target );
	void (*GetMinmax)( GLenum target, GLboolean reset, GLenum format, GLenum types, GLvoid *values );
	void (*GetMinmaxParameterfv)( GLenum target, GLenum pname, GLfloat *params );
	void (*GetMinmaxParameteriv)( GLenum target, GLenum pname, GLint *params );
	void (*ConvolutionFilter1D)( GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image );
	void (*ConvolutionFilter2D)( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image );
	void (*ConvolutionParameterf)( GLenum target, GLenum pname, GLfloat params );
	void (*ConvolutionParameterfv)( GLenum target, GLenum pname, const GLfloat *params );
	void (*ConvolutionParameteri)( GLenum target, GLenum pname, GLint params );
	void (*ConvolutionParameteriv)( GLenum target, GLenum pname, const GLint *params );
	void (*CopyConvolutionFilter1D)( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width );
	void (*CopyConvolutionFilter2D)( GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
	void (*GetConvolutionFilter)( GLenum target, GLenum format, GLenum type, GLvoid *image );
	void (*GetConvolutionParameterfv)( GLenum target, GLenum pname, GLfloat *params );
	void (*GetConvolutionParameteriv)( GLenum target, GLenum pname, GLint *params );
	void (*SeparableFilter2D)( GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column );
	void (*GetSeparableFilter)( GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span );
	void (*ActiveTexture)( GLenum texture );
	void (*ClientActiveTexture)( GLenum texture );
	void (*CompressedTexImage1D)( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data );
	void (*CompressedTexImage2D)( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data );
	void (*CompressedTexImage3D)( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data );
	void (*CompressedTexSubImage1D)( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data );
	void (*CompressedTexSubImage2D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data );
	void (*CompressedTexSubImage3D)( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data );
	void (*GetCompressedTexImage)( GLenum target, GLint lod, GLvoid *img );
	void (*MultiTexCoord1d)( GLenum target, GLdouble s );
	void (*MultiTexCoord1dv)( GLenum target, const GLdouble *v );
	void (*MultiTexCoord1f)( GLenum target, GLfloat s );
	void (*MultiTexCoord1fv)( GLenum target, const GLfloat *v );
	void (*MultiTexCoord1i)( GLenum target, GLint s );
	void (*MultiTexCoord1iv)( GLenum target, const GLint *v );
	void (*MultiTexCoord1s)( GLenum target, GLshort s );
	void (*MultiTexCoord1sv)( GLenum target, const GLshort *v );
	void (*MultiTexCoord2d)( GLenum target, GLdouble s, GLdouble t );
	void (*MultiTexCoord2dv)( GLenum target, const GLdouble *v );
	void (*MultiTexCoord2f)( GLenum target, GLfloat s, GLfloat t );
	void (*MultiTexCoord2fv)( GLenum target, const GLfloat *v );
	void (*MultiTexCoord2i)( GLenum target, GLint s, GLint t );
	void (*MultiTexCoord2iv)( GLenum target, const GLint *v );
	void (*MultiTexCoord2s)( GLenum target, GLshort s, GLshort t );
	void (*MultiTexCoord2sv)( GLenum target, const GLshort *v );
	void (*MultiTexCoord3d)( GLenum target, GLdouble s, GLdouble t, GLdouble r );
	void (*MultiTexCoord3dv)( GLenum target, const GLdouble *v );
	void (*MultiTexCoord3f)( GLenum target, GLfloat s, GLfloat t, GLfloat r );
	void (*MultiTexCoord3fv)( GLenum target, const GLfloat *v );
	void (*MultiTexCoord3i)( GLenum target, GLint s, GLint t, GLint r );
	void (*MultiTexCoord3iv)( GLenum target, const GLint *v );
	void (*MultiTexCoord3s)( GLenum target, GLshort s, GLshort t, GLshort r );
	void (*MultiTexCoord3sv)( GLenum target, const GLshort *v );
	void (*MultiTexCoord4d)( GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q );
	void (*MultiTexCoord4dv)( GLenum target, const GLdouble *v );
	void (*MultiTexCoord4f)( GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q );
	void (*MultiTexCoord4fv)( GLenum target, const GLfloat *v );
	void (*MultiTexCoord4i)( GLenum target, GLint s, GLint t, GLint r, GLint q );
	void (*MultiTexCoord4iv)( GLenum target, const GLint *v );
	void (*MultiTexCoord4s)( GLenum target, GLshort s, GLshort t, GLshort r, GLshort q );
	void (*MultiTexCoord4sv)( GLenum target, const GLshort *v );
	void (*LoadTransposeMatrixd)( const GLdouble m[16] );
	void (*LoadTransposeMatrixf)( const GLfloat m[16] );
	void (*MultTransposeMatrixd)( const GLdouble m[16] );
	void (*MultTransposeMatrixf)( const GLfloat m[16] );
	void (*SampleCoverage)( GLclampf value, GLboolean invert );
	void (*ActiveTextureARB)(GLenum texture);
	void (*ClientActiveTextureARB)(GLenum texture);
	void (*MultiTexCoord1dARB)(GLenum target, GLdouble s);
	void (*MultiTexCoord1dvARB)(GLenum target, const GLdouble *v);
	void (*MultiTexCoord1fARB)(GLenum target, GLfloat s);
	void (*MultiTexCoord1fvARB)(GLenum target, const GLfloat *v);
	void (*MultiTexCoord1iARB)(GLenum target, GLint s);
	void (*MultiTexCoord1ivARB)(GLenum target, const GLint *v);
	void (*MultiTexCoord1sARB)(GLenum target, GLshort s);
	void (*MultiTexCoord1svARB)(GLenum target, const GLshort *v);
	void (*MultiTexCoord2dARB)(GLenum target, GLdouble s, GLdouble t);
	void (*MultiTexCoord2dvARB)(GLenum target, const GLdouble *v);
	void (*MultiTexCoord2fARB)(GLenum target, GLfloat s, GLfloat t);
	void (*MultiTexCoord2fvARB)(GLenum target, const GLfloat *v);
	void (*MultiTexCoord2iARB)(GLenum target, GLint s, GLint t);
	void (*MultiTexCoord2ivARB)(GLenum target, const GLint *v);
	void (*MultiTexCoord2sARB)(GLenum target, GLshort s, GLshort t);
	void (*MultiTexCoord2svARB)(GLenum target, const GLshort *v);
	void (*MultiTexCoord3dARB)(GLenum target, GLdouble s, GLdouble t, GLdouble r);
	void (*MultiTexCoord3dvARB)(GLenum target, const GLdouble *v);
	void (*MultiTexCoord3fARB)(GLenum target, GLfloat s, GLfloat t, GLfloat r);
	void (*MultiTexCoord3fvARB)(GLenum target, const GLfloat *v);
	void (*MultiTexCoord3iARB)(GLenum target, GLint s, GLint t, GLint r);
	void (*MultiTexCoord3ivARB)(GLenum target, const GLint *v);
	void (*MultiTexCoord3sARB)(GLenum target, GLshort s, GLshort t, GLshort r);
	void (*MultiTexCoord3svARB)(GLenum target, const GLshort *v);
	void (*MultiTexCoord4dARB)(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
	void (*MultiTexCoord4dvARB)(GLenum target, const GLdouble *v);
	void (*MultiTexCoord4fARB)(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
	void (*MultiTexCoord4fvARB)(GLenum target, const GLfloat *v);
	void (*MultiTexCoord4iARB)(GLenum target, GLint s, GLint t, GLint r, GLint q);
	void (*MultiTexCoord4ivARB)(GLenum target, const GLint *v);
	void (*MultiTexCoord4sARB)(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
	void (*MultiTexCoord4svARB)(GLenum target, const GLshort *v);
	GLhandleARB (*CreateDebugObjectMESA)(void);
	void (*ClearDebugLogMESA)(GLhandleARB obj, GLenum logType, GLenum shaderType);
	void (*GetDebugLogMESA)(GLhandleARB obj, GLenum logType, GLenum shaderType, GLsizei maxLength, GLsizei *length, GLcharARB *debugLog);
	GLsizei (*GetDebugLogLengthMESA)(GLhandleARB obj, GLenum logType, GLenum shaderType);
	void (*ProgramCallbackMESA)(GLenum target, GLprogramcallbackMESA callback, GLvoid *data);
	void (*GetProgramRegisterfvMESA)(GLenum target, GLsizei len, const GLubyte *name, GLfloat *v);
	void (*BlendEquationSeparateATI)( GLenum modeRGB, GLenum modeA );
/* Functions generated: 461 */
